generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          String         @default("CUSTOMER")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reservations  Reservation[]
  billings      Billing[]
}

model Room {
  id            String         @id @default(uuid())
  number        String         @unique
  type          String
  price         Float
  status        String         @default("AVAILABLE")
  image         String?        @default("https://images.pexels.com/photos/164595/pexels-photo-164595.jpeg")
  description   String?
  capacity      Int           @default(2)
  amenities     String[]
  weeklyRate    Float?
  monthlyRate   Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reservations  Reservation[]
}

model Reservation {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  room          Room           @relation(fields: [roomId], references: [id])
  roomId        String
  checkIn       DateTime
  checkOut      DateTime
  guests        Int            @default(1)
  status        String         @default("PENDING")
  totalAmount   Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  billing       Billing?
  creditCard    CreditCard?
  optionalCharges OptionalCharge[]
}

model Billing {
  id            String         @id @default(uuid())
  reservation   Reservation    @relation(fields: [reservationId], references: [id])
  reservationId String        @unique
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  amount        Float
  status        String        @default("PENDING")
  paymentMethod String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CreditCard {
  id            String         @id @default(uuid())
  reservation   Reservation    @relation(fields: [reservationId], references: [id])
  reservationId String        @unique
  cardNumber    String
  expiryMonth   Int
  expiryYear    Int
  cvv           String
  holderName    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OptionalCharge {
  id            String         @id @default(uuid())
  reservation   Reservation    @relation(fields: [reservationId], references: [id])
  reservationId String
  description   String
  amount        Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
enum Role {
  CUSTOMER
  COMPANY
  MANAGER
}

enum RoomType {
  SINGLE
  DOUBLE
  FAMILY
  DELUXE
  SUITE
}

enum ResStatus {
  PENDING
  CONFIRMED
  CANCELLED
  NO_SHOW
  CHECKED_IN
  CHECKED_OUT
}

enum PaymentMethod {
  CASH
  CARD
  COMPANY
}